# Xpertly Project Guidelines

## 1. Mobile-First Design

- All components must be designed for mobile devices first
- Use TailwindCSS responsive classes (sm:, md:, lg:, xl:)
- Test all components on mobile viewports first

## 2. Component Size Limit

- Maximum 200 lines of code per component
- Break down complex components into smaller, reusable pieces
- Keep components focused on a single responsibility

## 3. File Naming Conventions

- Feature/layout component files must be named: `ComponentName.component.tsx` (PascalCase)
- UI component files must be named: `ComponentName.ui.tsx` (PascalCase)
- Provider components must be named: `Name.provider.tsx` (PascalCase)
- Helper functions must be named: `name.helper.ts` (camelCase)
- Interface/type files must be in `/types` folder (TypeScript interface files)
- Constants must be stored in the `/constants` directory

## 4. Directory Structure

The project follows this directory structure:

```
src/
  ├── app/           # Next.js App Router pages
  ├── components/    # React components
  │   ├── layout/    # Layout components
  │   └── features/  # Feature-specific components
  ├── ui/            # Base UI components (buttons, inputs, etc.)
  ├── store/         # State management
  │   ├── context/   # Context-based state providers
  │   └── jotai/     # Jotai state management
  ├── helper/        # Helper functions and utilities
  ├── constants/     # Constants and configuration values
  ├── types/         # TypeScript interfaces and types
  └── mock/          # Mock data for development
```

## 5. Progress Tracking

- Update progress.md after every task and sub-task
- Include detailed notes about:
  - Component construction
  - Mobile-first validation
  - Integration of specified libraries
  - Any challenges faced and solutions implemented

## 6. Technology Stack

- Next.js for the framework
- TailwindCSS for styling (with custom theme colors)
- shadcn UI components for consistent UI
- react-query for state management
- Phosphoricons for icons
- Supabase for backend services

## 7. Code Quality

- Follow ESLint and Prettier configurations
- Write clean, maintainable code
- Include appropriate comments and documentation
- Ensure proper TypeScript typing 